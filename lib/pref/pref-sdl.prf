#=====================================================================
# SDL2 ドライバ キー入力設定
#
# 変愚蛮怒の入力システムは、特殊キー(ファンクションキーやカーソルキー)を直接や
# りとりしない。代わりに、ドライバが特殊キーをマクロトリガーに変換してゲーム側
# へ送信する仕組みを設けている。本ファイルはそのための設定を記述する。
#
# ドライバからゲーム側へ送るマクロトリガーのフォーマットは以下のように書く:
#
#   T:<template>:<modifiers>:<mod_name1>:<mod_name2>...
#
# 例(以下の説明ではこのフォーマットを使う):
#
#   T:&x#:CSA:control-:shift-:alt-
#
# <template> 内の '#' は入力キーを表す文字列で置換される。具体的には16進文字列
# ("FF" など)であることが多いが、違う形式でも構わない。
#
# <template> 内の '&' は修飾キーを表す文字たちで置換される。現れうる文字たちは
# <modifiers> に記述するが、事実上 'C', 'S', 'A' で固定と考えてよい(それぞれ
# Ctrl, Shift, Alt を表す)。
#
# 例えば、ドライバがカーソル左キーを文字列 "Left" で表すことにしたとする。この
# ときユーザーが Shift+Left を入力すると、ドライバは以下の文字列をゲーム側へ送
# る(ダブルクォートは含まない):
#
#   "\x1FSxLeft\r"
#
# ここで、'\x1F' は特殊キー送信開始コード、'\r' は終端コードである。ゲーム側は
# この文字列全体をマクロトリガーとして扱う。このトリガーはゲーム内でマクロを作
# る際にも使えるし、本ファイル内でデフォルトの動作を割り当てることもできる。た
# とえば、Shift+Left を「左へ走る」動作にしたければ
#
#   A:\e\e\\.4
#   P:\x1FSxLeft\r
#
# と書く。なお、\x1F の部分は ^_ とも書ける('^' は Ctrl 修飾を表し、次の文字の
# 下位 5bit のみを取り出す。'_' == '\x5F' なので、結局 '\x1F' と等価になる)。
#
# <mod_name1>, <mod_name2>, ... は修飾キーの表示文字列で、<modifiers> の文字列
# と同じ個数だけ存在しなければならない。これはマクロ作成時などにトリガーを読み
# やすく表示するのに使われる。
#
# さらに、修飾キーを除いた特殊キーそのものの表示文字列も本ファイルで記述する。
# 例えば、カーソル左キーを文字列 "Hidari" で表示したい場合
#
#   T:Hidari:Left
#
# と書くと、ゲーム上では Shift+Left が \[shift-Hidari] と表示される。
#
# 上記以外の仕様もいくつかあるが、新規にドライバを書く際には無視してよいと思わ
# れるので省略。
#=====================================================================

T:&x#:CSA:control-:shift-:alt-

# カーソル左キーで左へ歩く/走る例

# ゲーム上ではカーソル左キーが \[Hidari] と表示される
T:Hidari:Left

# 左へ歩く (内部的キー配置 ; を使用)
A:\\;4
P:\x1FxLeft\r
# こう書いても同じ
#P:^_xLeft\r

# 左へ走る (内部的キー配置 . を使用)
A:\e\e\\.4
P:\x1FSxLeft\r
